// Generated by CoffeeScript 1.9.0
define(function(require, exports, module) {
  var FuzzySearcher, OnePhaseFuzzyStrategy, Promise, TwoPhaseFuzzyStrategy;

  FuzzySearcher = require("./text_searcher");

  Promise = require('es6-promise').Promise;

  OnePhaseFuzzyStrategy = (function() {
    OnePhaseFuzzyStrategy.prototype.name = "one-phase fuzzy";

    OnePhaseFuzzyStrategy.prototype.priority = 70;

    function OnePhaseFuzzyStrategy() {
      this.textFinder = new FuzzySearcher();
    }

    OnePhaseFuzzyStrategy.prototype.configure = function(_at_manager) {
      this.manager = _at_manager;
    };

    OnePhaseFuzzyStrategy.prototype.createAnchor = function(selectors) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var expectedStart, posSelector, quote, _base;
          quote = typeof (_base = _this.manager)._getQuoteForSelectors === "function" ? _base._getQuoteForSelectors(selectors) : void 0;
          if (!quote) {
            reject("No TextQuoteSelector found.");
            return;
          }
          if (!(quote.length >= 32)) {
            reject("can't use this strategy for quotes this short");
            return;
          }
          posSelector = _this.manager._findSelector(selectors, "TextPositionSelector");
          expectedStart = posSelector != null ? posSelector.start : void 0;
          return _this.manager._document.prepare("anchoring").then(function(s) {
            var anchor, error, len, match, options, result;
            try {
              len = s.getCorpus().length;
              if (expectedStart == null) {
                expectedStart = Math.floor(len / 2);
              }
              options = {
                matchDistance: len * 2,
                withFuzzyComparison: true
              };
              result = _this.textFinder.searchFuzzy(s.getCorpus(), quote, expectedStart, false, options);
              if (!result.matches.length) {
                reject("fuzzy found no match for '" + quote + "' @ " + expectedStart);
                return;
              }
              match = result.matches[0];
              anchor = {
                type: "text position",
                start: match.start,
                end: match.end,
                startPage: s.getPageIndexForPos(match.start),
                endPage: s.getPageIndexForPos(match.end),
                quote: match.found
              };
              if (!match.exact) {
                anchor.diffHTML = match.comparison.diffHTML;
                anchor.diffCaseOnly = match.exactExceptCase;
              }
              return resolve(anchor);
            } catch (_error) {
              error = _error;
              return reject(error);
            }
          });
        };
      })(this));
    };

    OnePhaseFuzzyStrategy.prototype.verifyAnchor = function(anchor, reason, data) {
      return reason !== "corpus change";
    };

    return OnePhaseFuzzyStrategy;

  })();

  TwoPhaseFuzzyStrategy = (function() {
    TwoPhaseFuzzyStrategy.prototype.name = "two-phase fuzzy";

    TwoPhaseFuzzyStrategy.prototype.priority = 60;

    function TwoPhaseFuzzyStrategy() {
      this.textFinder = new FuzzySearcher();
    }

    TwoPhaseFuzzyStrategy.prototype.configure = function(_at_manager) {
      this.manager = _at_manager;
    };

    TwoPhaseFuzzyStrategy.prototype.createAnchor = function(selectors) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var expectedEnd, expectedStart, posSelector, prefix, quote, quoteSelector, suffix;
          quoteSelector = _this.manager._findSelector(selectors, "TextQuoteSelector");
          if (!quoteSelector) {
            reject("no TextQuoteSelector found", true);
            return;
          }
          prefix = quoteSelector.prefix;
          suffix = quoteSelector.suffix;
          quote = quoteSelector.exact;
          if (!(prefix && suffix)) {
            reject("prefix and suffix is required");
            return;
          }
          posSelector = _this.manager._findSelector(selectors, "TextPositionSelector");
          expectedStart = posSelector != null ? posSelector.start : void 0;
          expectedEnd = posSelector != null ? posSelector.end : void 0;
          return _this.manager._document.prepare("anchoring").then(function(s) {
            var anchor, error, match, options, result;
            try {
              options = {
                contextMatchDistance: s.getCorpus().length * 2,
                contextMatchThreshold: 0.5,
                patternMatchThreshold: 0.5,
                flexContext: true
              };
              result = _this.textFinder.searchFuzzyWithContext(s.getCorpus(), prefix, suffix, quote, expectedStart, expectedEnd, false, options);
              if (!result.matches.length) {
                reject("fuzzy match found no result for '" + quote + "' @ " + expectedStart + ".");
                return;
              }
              match = result.matches[0];
              anchor = {
                type: "text position",
                start: match.start,
                end: match.end,
                startPage: s.getPageIndexForPos(match.start),
                endPage: s.getPageIndexForPos(match.end),
                quote: match.found
              };
              if (!match.exact) {
                anchor.diffHTML = match.comparison.diffHTML;
                anchor.diffCaseOnly = match.exactExceptCase;
              }
              return resolve(anchor);
            } catch (_error) {
              error = _error;
              return reject(error);
            }
          });
        };
      })(this));
    };

    TwoPhaseFuzzyStrategy.prototype.verifyAnchor = function(anchor, reason, data) {
      return reason !== "corpus change";
    };

    return TwoPhaseFuzzyStrategy;

  })();

  module.exports = {
    strategy: {
      onePhase: OnePhaseFuzzyStrategy,
      twoPhase: TwoPhaseFuzzyStrategy
    }
  };

})
